generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  clerkId             String         @unique
  email               String         @unique
  firstName           String?
  lastName            String?
  role                UserRole       @default(STAFF)
  isActive            Boolean        @default(true)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  customerNotes       CustomerNote[]
  menuItemsCreated    MenuItem[]     @relation("CreatedBy")
  reservationsCreated Reservation[]  @relation("CreatedBy")
  reservationsUpdated Reservation[]  @relation("UpdatedBy")

  @@map("users")
}

model Customer {
  id                     String                  @id @default(cuid())
  firstName              String
  lastName               String
  email                  String                  @unique
  phone                  String?
  language               Language                @default(DE)
  dateOfBirth            DateTime?
  preferredTime          String?
  preferredLocation      TableLocation?
  dietaryRestrictions    String[]
  allergies              String?
  favoriteDisheIds       String[]
  emailConsent           Boolean                 @default(false)
  smsConsent             Boolean                 @default(false)
  marketingConsent       Boolean                 @default(false)
  dataProcessingConsent  Boolean                 @default(true)
  consentDate            DateTime?
  totalVisits            Int                     @default(0)
  totalSpent             Decimal                 @default(0)
  averagePartySize       Int                     @default(2)
  lastVisit              DateTime?
  isVip                  Boolean                 @default(false)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  notes                  CustomerNote[]
  newsletterSubscription NewsletterSubscription?
  reservations           Reservation[]

  @@map("customers")
}

model CustomerNote {
  id          String   @id @default(cuid())
  customerId  String
  userId      String
  note        String
  isImportant Boolean  @default(false)
  createdAt   DateTime @default(now())
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])

  @@map("customer_notes")
}

model Table {
  id           String        @id @default(cuid())
  number       Int           @unique
  capacity     Int
  location     TableLocation
  isActive     Boolean       @default(true)
  description  String?
  xPosition    Float?
  yPosition    Float?
  shape        TableShape    @default(RECTANGLE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  qrCodes      QRCode[]
  reservations Reservation[]

  @@map("tables")
}

model Reservation {
  id                 String            @id @default(cuid())
  customerId         String
  tableId            String?
  dateTime           DateTime
  partySize          Int
  duration           Int               @default(120)
  status             ReservationStatus @default(PENDING)
  specialRequests    String?
  occasion           String?
  dietaryNotes       String?
  isConfirmed        Boolean           @default(false)
  confirmationSentAt DateTime?
  reminderSentAt     DateTime?
  checkedInAt        DateTime?
  completedAt        DateTime?
  cancelledAt        DateTime?
  cancellationReason String?
  source             ReservationSource @default(WEBSITE)
  notes              String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  createdById        String
  updatedById        String?
  createdBy          User              @relation("CreatedBy", fields: [createdById], references: [id])
  customer           Customer          @relation(fields: [customerId], references: [id])
  table              Table?            @relation(fields: [tableId], references: [id])
  updatedBy          User?             @relation("UpdatedBy", fields: [updatedById], references: [id])

  @@map("reservations")
}

model MenuCategory {
  id            String     @id @default(cuid())
  name          String
  nameEn        String?
  description   String?
  descriptionEn String?
  displayOrder  Int        @default(0)
  isActive      Boolean    @default(true)
  icon          String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  menuItems     MenuItem[]

  @@map("menu_categories")
}

model MenuItem {
  id                String       @id @default(cuid())
  categoryId        String
  name              String
  nameEn            String?
  description       String
  descriptionEn     String?
  price             Decimal      @db.Decimal(10, 2)
  isAvailable       Boolean      @default(true)
  isSignature       Boolean      @default(false)
  isNew             Boolean      @default(false)
  isSeasonalSpecial Boolean      @default(false)
  availableFrom     DateTime?
  availableTo       DateTime?
  containsGluten    Boolean      @default(false)
  containsMilk      Boolean      @default(false)
  containsEggs      Boolean      @default(false)
  containsNuts      Boolean      @default(false)
  containsFish      Boolean      @default(false)
  containsShellfish Boolean      @default(false)
  containsSoy       Boolean      @default(false)
  containsCelery    Boolean      @default(false)
  containsMustard   Boolean      @default(false)
  containsSesame    Boolean      @default(false)
  containsSulfites  Boolean      @default(false)
  containsLupin     Boolean      @default(false)
  containsMollusks  Boolean      @default(false)
  containsPeanuts   Boolean      @default(false)
  isVegetarian      Boolean      @default(false)
  isVegan           Boolean      @default(false)
  isGlutenFree      Boolean      @default(false)
  isLactoseFree     Boolean      @default(false)
  displayOrder      Int          @default(0)
  images            String[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  createdById       String
  category          MenuCategory @relation(fields: [categoryId], references: [id])
  createdBy         User         @relation("CreatedBy", fields: [createdById], references: [id])

  @@map("menu_items")
}

model QRCode {
  id            String        @id @default(cuid())
  tableId       String
  code          String        @unique
  isActive      Boolean       @default(true)
  scansCount    Int           @default(0)
  lastScannedAt DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  table         Table         @relation(fields: [tableId], references: [id])
  scanEvents    QRScanEvent[]

  @@map("qr_codes")
}

model QRScanEvent {
  id        String   @id @default(cuid())
  qrCodeId  String
  ipAddress String?
  userAgent String?
  scannedAt DateTime @default(now())
  qrCode    QRCode   @relation(fields: [qrCodeId], references: [id])

  @@map("qr_scan_events")
}

model PageContent {
  id              String    @id @default(cuid())
  slug            String    @unique
  title           String
  titleEn         String?
  content         String
  contentEn       String?
  metaTitle       String?
  metaDescription String?
  isPublished     Boolean   @default(false)
  publishedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("page_content")
}

model GalleryImage {
  id            String          @id @default(cuid())
  title         String
  titleEn       String?
  description   String?
  descriptionEn String?
  imageUrl      String
  category      GalleryCategory
  isActive      Boolean         @default(true)
  displayOrder  Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("gallery_images")
}

model NewsletterSubscription {
  id             String    @id @default(cuid())
  customerId     String    @unique
  isActive       Boolean   @default(true)
  subscribedAt   DateTime  @default(now())
  unsubscribedAt DateTime?
  customer       Customer  @relation(fields: [customerId], references: [id])

  @@map("newsletter_subscriptions")
}

model AnalyticsEvent {
  id        String             @id @default(cuid())
  eventType AnalyticsEventType
  eventData Json
  sessionId String?
  ipAddress String?
  userAgent String?
  timestamp DateTime           @default(now())

  @@map("analytics_events")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
  KITCHEN
}

enum TableLocation {
  TERRACE_SEA_VIEW
  TERRACE_STANDARD
  INDOOR_WINDOW
  INDOOR_STANDARD
  BAR_AREA
}

enum TableShape {
  RECTANGLE
  ROUND
  SQUARE
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  SEATED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum ReservationSource {
  WEBSITE
  PHONE
  WALK_IN
  SOCIAL_MEDIA
}

enum GalleryCategory {
  RESTAURANT
  FOOD
  TEAM
  EVENTS
  AMBIENCE
}

enum AnalyticsEventType {
  PAGE_VIEW
  RESERVATION_STARTED
  RESERVATION_COMPLETED
  MENU_VIEWED
  QR_CODE_SCANNED
  EMAIL_OPENED
  PHONE_CLICKED
}

enum Language {
  DE
  EN
}
